import numpy as np
from math import pi,sin,cos,sqrt,acos
import random

ALP1=np.array([[0,0,0,1],
               [0,0,1,0],
               [0,1,0,0],
               [1,0,0,0]])
ALP2=np.array([[0,0,0,complex(0,-1)],
               [0,0,complex(0,1),0],
               [0,complex(0,-1),0,0],
               [complex(0,1),0,0,0]])
ALP3=np.array([[0,0,1,0],
               [0,0,0,-1],
               [1,0,0,0],
               [0,-1,0,0]])

GM0=np.array([[1,0,0,0], 
              [0,1,0,0],
              [0,0,-1,0],
              [0,0,0,-1]])

GM1=np.zeros_like(GM0)
for i in range(len(GM0)):
    for j in range(len(GM0)):
        for k in range(len(GM0)):
            GM1[i,j]+=(GM0[i,k])*(ALP1[k,j]) 

GM2=np.zeros_like(ALP2)
for i in range(len(GM0)):
    for j in range(len(GM0)):
        for k in range(len(GM0)):
            GM2[i,j]+=(GM0[i,k])*(ALP2[k,j]) 

GM3=np.zeros_like(GM0)
for i in range(len(GM0)):
    for j in range(len(GM0)):
        for k in range(len(GM0)):
            GM3[i,j]+=(GM0[i,k])*(ALP3[k,j])

x1=np.zeros_like(ALP2)
x2=np.zeros_like(x1)
x3=np.zeros_like(x2)
for i in range(len(GM0)):
    for j in range(len(GM0)):
        for k in range(len(GM0)):
            x1[i,j]+=(GM0[i,k])*(GM1[k,j])
for i in range(len(GM0)):
    for j in range(len(GM0)):
        for k in range(len(GM0)):
            x2[i,j]+=(x1[i,k])*(GM2[k,j])
for i in range(len(GM0)):
    for j in range(len(GM0)):
        for k in range(len(GM0)):
            x3[i,j]+=(x2[i,k])*(GM3[k,j])
GM5=complex(0,1)*x3                         

GM=np.array([GM0,GM1,GM2,GM3])

sp=[]
SEp=[]
Ang=[]

def amplitude():
    me=0.511e-3   
    n=320
    p1=random.randint(0,n)
    p_1=p1
    k1=-1*random.randint(0,n)
    p2=random.randint(0,n)
    p3=random.randint(0,n)
    p_2=p2
    p_3=p3
    k2=-1*random.randint(0,n)
    k3=-1*random.randint(0,n)
    k_2=k2
    k_3=k3
    p0=(me**2+p1**2+p2**2+p3**2)**0.5
    k0=(k1**2+k2**2+k3**2)**0.5
    p_0=p0
    k_0=k0
    k_1=k1

    sp.append(p0+k0)
    s=(p0+k0)**2
    p=np.array([p0,p1,p2,p3]) 
    k=np.array([k0,k1,k2,k3]) 
    k_=np.array([k_0,k_1,k_2,k_3])  
    p_=np.array([p_0,p_1,p_2,p_3])  

    X=np.zeros_like(GM[2]) 
    for i in range(1,3+1):
        x=GM[i]*p[i]
        X+=x
        i=i+1
    ps=GM[0]*p[0]-X     


    X=np.zeros_like(GM[2])
    for i in range(1,3+1):
        x=GM[i]*k[i]
        X+=x
        i=i+1
    ks=GM[0]*k[0]-X     

    X=np.zeros_like(GM[2])
    for i in range(1,3+1):
        x=GM[i]*p_[i]
        X+=x
        i=i+1
    p_s=GM[0]*p_[0]-X   

    X=np.zeros_like(GM[2])
    for i in range(1,3+1):
        x=GM[i]*k_[i]
        X+=x
        i=i+1
    k_s=GM[0]*k_[0]-X   

    A=np.identity(4)-GM5  
    def N1(a,b):
        N1=((((GM[a]@A)@(ps+me))@GM[b])@A)@ks
        return N1
    def N2(a,b):
        N2=((((GM[a]@A)@k_s)@GM[b])@(A))@(p_s+me)
        return N2

    tr0=np.trace(N1(0,0))*np.trace(N2(0,0))

    tr1=0
    for a in range(1,3+1):
        AI=np.trace(N1(a,0))*np.trace(N2(a,0))
        tr1+=AI

    tr2=0
    for b in range(1,3+1):
        AI=np.trace(N1(0,b))*np.trace(N2(0,b))
        tr2+=AI

    tr3=0
    for a in range(1,3+1):
        for b in range(1,3+1):
            AI=np.trace(N1(a,b))*np.trace(N2(a,b))
            tr3+=AI

    sm=tr0-tr1-tr2+tr3
    SM=sm.real   
    SM
    amplitude = SM
    return amplitude
amplitude()
