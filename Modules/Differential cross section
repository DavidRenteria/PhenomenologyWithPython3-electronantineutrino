import random
sp=[]
SEp=[]
Ang=[]
n=360
events=50000
energy_gap0=energy[8]
energy_gapn=energy[10]
me=0.511e-3  
for i in range(events+1):  
    p1=random.randint(0,n)
    p2=random.randint(0,n)
    p3=random.randint(0,n)
    k1=random.randint(0,n)
    k2=random.randint(0,n)
    k3=random.randint(0,n)
    p0=(me**2+p1**2+p2**2+p3**2)**0.5
    k0=(k1**2+k2**2+k3**2)**0.5

    SM = amplitude(p1,p2,p3,k1,k2,k3,me)
    G = (pi/(alpha2_inv[10]*sqrt(2)*80.387**2))
    
    if ((p0+k0)>=energy_gap0):
        if ((p0+k0)<=energy_gapn):

            sp.append(p0+k0)
            s=(p0+k0)**2
            KP=k0*p0-k1*p1-k2*p2-k3*p3
            CosAnlgle =(k1*p1+k2*p2+k3*p3) / (sqrt(k1**2+k2**2+k3**2)*sqrt(p1**2+p2**2+p3**2))
            Angle = acos(CosAnlgle)

            dSigma = (2*pi*sin(Angle)) * (G**2*(s-me**2)*SM)/(2*2*pi**2*16*(KP)*2*2*2*s) 
            SEp.append(dSigma/2.56819e-9)
            Ang.append(Angle*180/pi)

for i in range(events+1):
 
    p1=random.randint(0,n)
    p2=random.randint(0,n)
    p3=random.randint(0,n)
    k1=-random.randint(0,n)
    k2=-random.randint(0,n)
    k3=-random.randint(0,n)
    p0=(me**2+p1**2+p2**2+p3**2)**0.5
    k0=(k1**2+k2**2+k3**2)**0.5

    SM = amplitude(p1,p2,p3,k1,k2,k3,me)
    G = (pi/(alpha2_inv[10]*sqrt(2)*80.387**2))
    
    if ((p0+k0)>=energy_gap0):
        if ((p0+k0)<=energy_gapn):

            sp.append(p0+k0)
            s=(p0+k0)**2
            KP=k0*p0-k1*p1-k2*p2-k3*p3
            CosAnlgle =(k1*p1+k2*p2+k3*p3) / (sqrt(k1**2+k2**2+k3**2)*sqrt(p1**2+p2**2+p3**2))
            Angle = acos(CosAnlgle)

            dSigma = (2*pi*sin(Angle)) * (G**2*(s-me**2)*SM)/(2*2*pi**2*16*(KP)*2*2*2*s) 
            SEp.append(dSigma/2.56819e-9)
            Ang.append(Angle*180/pi)
            
            
 from scipy.optimize import curve_fit

x=np.zeros(len(Ang))
y=np.zeros(len(SEp))

for i in range(0,len(Ang)):
    x[i]=Ang[i]
    y[i]=SEp[i]
    
def f(x, a0,a1,a2,a3,a4,a5,a6,a7,a8):
    return a0+a1*x+a2*x**2+a3*x**3+a4*x**4+a5*x**5+a6*x**6+a7*x**7+a8*x**8
a,pcov = curve_fit(f, x, y)

def regresion(x):
    return a[0]+a[1]*x+a[2]*x**2+a[3]*x**3+a[4]*x**4+a[5]*x**5+a[6]*x**6+a[7]*x**7+a[8]*x**8

AngRegresion=np.zeros(180)
SEpRegresion=np.zeros(180)
for i in range(0,180):
    AngRegresion[i]=i
    SEpRegresion[i]=regresion(i)


disAleatoriaX=[]
disAleatoriaY=[] 
disBajoLaCurvaX=[]
disBajoLaCurvaY=[]
interaction = 5000
for i in range (interaction):
    x=180*random.random()
    y=max(SEpRegresion+0.01)*random.random()
    if y<=regresion(x):
        disBajoLaCurvaX.append(x)
        disBajoLaCurvaY.append(y)
    else:
        disAleatoriaX.append(x)
        disAleatoriaY.append(y)
